# Production-Scale Frontend Deployment
# Kubernetes-aware authentication system design

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-frontend-deployment
  namespace: ecommerce-production
  labels:
    app: ecommerce-frontend
    tier: frontend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: ecommerce-frontend
    tags.datadoghq.com/version: 1.0.0
spec:
  replicas: 3  # Production-scale: 3 replicas for high availability
  selector:
    matchLabels:
      app: ecommerce-frontend
  template:
    metadata:
      labels:
        app: ecommerce-frontend
        tier: frontend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: ecommerce-frontend
        tags.datadoghq.com/version: 1.0.0
        admission.datadoghq.com/enabled: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
        admission.datadoghq.com/js-lib.version: v5.74.0
    spec:
      containers:
      - name: ecommerce-frontend
        image: ecommerce-frontend:latest
        imagePullPolicy: Never  # Use local image for Minikube
        ports:
        - containerPort: 3000
          name: http
        env:
        # Database Configuration
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: DATABASE_URL
        # Application Configuration
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: NODE_ENV
        - name: NEXTAUTH_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: NEXTAUTH_URL
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: nextauth-secret
        # Security Configuration
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: encryption-key
        # Kubernetes-aware Session Configuration
        - name: SESSION_COOKIE_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: SESSION_COOKIE_DOMAIN
        - name: SESSION_COOKIE_SECURE
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: SESSION_COOKIE_SECURE
        - name: SESSION_COOKIE_HTTPONLY
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: SESSION_COOKIE_HTTPONLY
        - name: SESSION_COOKIE_SAMESITE
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: SESSION_COOKIE_SAMESITE
        # Performance Configuration
        - name: MAX_CONNECTIONS
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: MAX_CONNECTIONS
        - name: CONNECTION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: CONNECTION_TIMEOUT
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: REQUEST_TIMEOUT
        # DataDog APM Configuration
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_SERVICE
          value: "ecommerce-frontend"
        - name: DD_ENV
          value: "production"
        - name: DD_VERSION
          value: "1.0.0"
        - name: DD_TRACE_ENABLED
          value: "true"
        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"
        - name: ENABLE_METRICS
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: ENABLE_METRICS
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # Allow up to 1 minute for startup
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-frontend-service
  namespace: ecommerce-production
  labels:
    app: ecommerce-frontend
spec:
  selector:
    app: ecommerce-frontend
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ecommerce-frontend-hpa
  namespace: ecommerce-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ecommerce-frontend-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
