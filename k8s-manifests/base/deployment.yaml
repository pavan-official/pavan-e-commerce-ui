# ðŸš€ **Base Deployment**
# Common deployment configuration for all environments
# Interview Story: "This is our base application deployment that all environments inherit from"

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-frontend-deployment
  namespace: ecommerce
  labels:
    app: ecommerce
    component: frontend
    managed-by: kustomize
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ecommerce
      component: frontend
  template:
    metadata:
      labels:
        app: ecommerce
        component: frontend
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        runAsNonRoot: true
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Waiting for database..."
          until nc -z postgres-service 5432; do
            echo "Database not ready, waiting..."
            sleep 2
          done
          echo "Database is ready!"
          
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do
            echo "Redis not ready, waiting..."
            sleep 2
          done
          echo "Redis is ready!"
        resources:
          limits:
            cpu: 50m
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 32Mi
      containers:
      - name: ecommerce-app
        image: ecommerce-frontend:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: NODE_ENV
        - name: DATABASE_URL
          value: "postgresql://ecommerce:password@postgres-service:5432/ecommerce_db"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: REDIS_PASSWORD
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: NEXTAUTH_SECRET
        - name: NEXTAUTH_URL
          valueFrom:
            configMapKeyRef:
              name: ecommerce-config
              key: NEXT_PUBLIC_APP_URL
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: STRIPE_SECRET_KEY
        - name: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
          valueFrom:
            secretKeyRef:
              name: ecommerce-secrets
              key: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /api/health/
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: kube-probe/1.0
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: kube-probe/1.0
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /api/health/
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: kube-probe/1.0
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: cache
          mountPath: /app/.next/cache
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ecommerce
              topologyKey: kubernetes.io/hostname