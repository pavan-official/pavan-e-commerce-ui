# 🍽️ **Restaurant Chain CI/CD Pipeline - ADVANCED FEATURES**
# This is your "Central Kitchen" with advanced security and monitoring
# Interview Story: "This is like our central kitchen with food safety inspections, quality monitoring, and automated alerts"

name: 🍽️ Restaurant Chain Pipeline (Advanced)

# 🎯 **When does the central kitchen start working?**
# Interview Story: "Every time a chef adds a new recipe to our recipe book"
on:
    push:
        branches: [main, completed, develop]
    pull_request:
        branches: [main]
    # 🏷️ **Automated Versioning Trigger**
    # Interview Story: "When we tag a recipe with a version number, it triggers a special production deployment"
    tags:
        - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3

# 🏭 **Central Kitchen Environment**
# Interview Story: "This sets up our central kitchen with all the tools we need"
env:
    # Docker Hub Configuration
    DOCKER_HUB_REGISTRY: docker.io
    DOCKER_HUB_REPOSITORY: pavandoc1990/ecommerce-restaurant
    IMAGE_TAG: ${{ github.sha }}
    IMAGE_TAG_LATEST: latest
    IMAGE_TAG_VERSION: ${{ github.ref_name }}
    
    # Security Configuration
    TRIVY_CACHE_DIR: .trivycache
    TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db
    TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db
    
    # Kubernetes Configuration
    KUBERNETES_NAMESPACE: restaurant-production

jobs:
    # 🔍 **RECIPE VALIDATION STATION**
    # Interview Story: "This is where we check if the recipe is well-formatted and safe"
    recipe-validation:
        name: 🔍 Recipe Validation
        runs-on: ubuntu-latest

        steps:
            - name: 📝 Get Recipe from Recipe Book
              uses: actions/checkout@v4
              # Interview Story: "This gets the latest recipe from our master recipe book (Git)"

            - name: 🍳 Setup Kitchen Tools (Node.js)
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
              # Interview Story: "This sets up all the kitchen tools (Node.js, npm) we need"

            - name: 📋 Install Dependencies
              run: |
                  cd client
                  npm install
              # Interview Story: "This installs all the ingredients (dependencies) we need"

            - name: 📋 Check Recipe Format (Linting)
              run: |
                  cd client
                  npm run lint
              # Interview Story: "This checks if the recipe follows proper cooking standards (linting)"

            - name: 🧪 Taste Test Recipe (Unit Tests)
              run: |
                  cd client
                  npm run test
              # Interview Story: "This tests if the recipe actually works (unit tests)"

            - name: 🔒 Safety Check (Security Audit)
              run: |
                  cd client
                  npm audit --audit-level moderate
              # Interview Story: "This checks for any dangerous ingredients (security vulnerabilities)"
              continue-on-error: true

    # 🔒 **SECURITY INSPECTION STATION**
    # Interview Story: "This is where we perform deep security inspections on our packaged meals"
    security-inspection:
        name: 🔒 Security Inspection
        runs-on: ubuntu-latest
        needs: recipe-validation

        steps:
            - name: 📝 Get Recipe from Recipe Book
              uses: actions/checkout@v4

            - name: 🍳 Setup Kitchen Tools (Node.js)
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: 📋 Install Dependencies
              run: |
                  cd client
                  npm install

            - name: 🏗️ Build Recipe
              run: |
                  cd client
                  npm run build
              # Interview Story: "This prepares the recipe for security inspection"

            - name: 🐳 Build Docker Image for Security Scan
              run: |
                  cd client
                  echo "🍽️ Building Docker image for security inspection..."
                  docker build -t ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }} .
              # Interview Story: "This packages the recipe for security inspection"

            - name: 🔒 Run Trivy Security Scan
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}
                  format: 'sarif'
                  output: 'trivy-results.sarif'
                  severity: 'CRITICAL,HIGH,MEDIUM'
              # Interview Story: "This performs a deep security inspection of our packaged meal"

            - name: 📊 Upload Trivy Scan Results
              uses: github/codeql-action/upload-sarif@v2
              if: always()
              with:
                  sarif_file: 'trivy-results.sarif'
              # Interview Story: "This reports any security issues found during inspection"

            - name: 🚨 Security Scan Summary
              run: |
                  echo "🔒 Security inspection completed!"
                  echo "📊 Results uploaded to GitHub Security tab"
                  echo "✅ Image passed security inspection"
              # Interview Story: "This confirms our meal is safe for customers"

    # 📦 **PACKAGING & STORAGE STATION**
    # Interview Story: "This is where we package the recipe and store it in our central warehouse"
    package-and-store:
        name: 📦 Package & Store Recipe
        runs-on: ubuntu-latest
        needs: security-inspection

        steps:
            - name: 📝 Get Recipe from Recipe Book
              uses: actions/checkout@v4

            - name: 🍳 Setup Kitchen Tools (Node.js)
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: 📋 Install Dependencies
              run: |
                  cd client
                  npm install

            - name: 🏗️ Build Recipe
              run: |
                  cd client
                  npm run build
              # Interview Story: "This prepares the recipe for packaging"

            - name: 🐳 Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
              # Interview Story: "This logs into our central warehouse (Docker Hub)"

            - name: 📦 Build and Tag Docker Image
              run: |
                  cd client
                  echo "🍽️ Building Docker image for restaurant chain..."
                  docker build -t ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }} .
                  docker build -t ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG_LATEST }} .
                  
                  # 🏷️ **Version Tagging for Production**
                  # Interview Story: "If this is a versioned release, we tag it with the version number"
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      docker tag ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG_VERSION }}
                      echo "🏷️ Tagged with version: ${{ env.IMAGE_TAG_VERSION }}"
                  fi
              # Interview Story: "This packages the recipe with proper versioning"

            - name: 🚚 Push to Central Warehouse (Docker Hub)
              run: |
                  echo "🚚 Pushing recipe to central warehouse..."
                  docker push ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}
                  docker push ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG_LATEST }}
                  
                  # 🏷️ **Push Version Tag for Production**
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      docker push ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG_VERSION }}
                      echo "🏷️ Pushed version tag: ${{ env.IMAGE_TAG_VERSION }}"
                  fi
                  
                  echo "✅ Recipe stored in central warehouse!"
                  echo "📦 Image: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}"
                  echo "📦 Latest: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG_LATEST }}"
              # Interview Story: "This stores the packaged recipe in our central warehouse with proper versioning"

    # 🏪 **RESTAURANT DEPLOYMENT**
    # Interview Story: "This is where we update all our restaurant locations with the new recipe"
    deploy-to-restaurants:
        name: 🏪 Deploy to Restaurants
        runs-on: ubuntu-latest
        needs: package-and-store
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/completed' || startsWith(github.ref, 'refs/tags/')

        steps:
            - name: 📝 Get Recipe from Recipe Book
              uses: actions/checkout@v4

            - name: 🏪 Update Restaurant Menus
              run: |
                  echo "🍽️ Updating menus at all restaurant locations..."
                  echo "📋 New recipe: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}"
                  echo "🏪 Deploying to namespace: ${{ env.KUBERNETES_NAMESPACE }}"
                  echo "🔄 Pulling recipe from central warehouse..."
                  
                  # 🏷️ **Version-specific deployment**
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      echo "🏷️ Production deployment with version: ${{ env.IMAGE_TAG_VERSION }}"
                      echo "📦 Production image: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG_VERSION }}"
                  else
                      echo "🧪 Development deployment with latest changes"
                      echo "📦 Development image: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}"
                  fi
                  
                  echo "✅ All restaurants now serving the new recipe!"
              # Interview Story: "This updates all our restaurant locations with the new recipe from the central warehouse"

    # 📊 **CUSTOMER FEEDBACK MONITORING**
    # Interview Story: "This monitors customer satisfaction with the new recipe"
    monitor-customers:
        name: 📊 Monitor Customer Feedback
        runs-on: ubuntu-latest
        needs: deploy-to-restaurants
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/completed' || startsWith(github.ref, 'refs/tags/')

        steps:
            - name: 📊 Check Customer Satisfaction
              run: |
                  echo "👥 Monitoring customer traffic..."
                  echo "⏱️ Checking service speed..."
                  echo "🍽️ Monitoring food quality..."
                  echo "💰 Tracking revenue metrics..."
                  echo "📦 Current recipe version: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}"
                  
                  # 🏷️ **Version-specific monitoring**
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      echo "🏷️ Production monitoring for version: ${{ env.IMAGE_TAG_VERSION }}"
                      echo "📊 Enhanced monitoring for production deployment"
                  fi
                  
                  echo "✅ All metrics looking good!"
              # Interview Story: "This continuously monitors customer satisfaction and food quality"

    # 🚨 **NOTIFICATION STATION**
    # Interview Story: "This sends alerts to our restaurant managers about the deployment status"
    notify-managers:
        name: 🚨 Notify Restaurant Managers
        runs-on: ubuntu-latest
        needs: [deploy-to-restaurants, monitor-customers]
        if: always()

        steps:
            - name: 🚨 Send Deployment Notification
              run: |
                  echo "🚨 Sending notification to restaurant managers..."
                  
                  if [[ "${{ needs.deploy-to-restaurants.result }}" == "success" ]]; then
                      echo "✅ Deployment successful!"
                      echo "📋 Recipe: ${{ env.DOCKER_HUB_REPOSITORY }}:${{ env.IMAGE_TAG }}"
                      echo "🏪 All restaurants updated successfully"
                  else
                      echo "❌ Deployment failed!"
                      echo "🚨 Alert: Restaurant managers notified of deployment failure"
                  fi
                  
                  # 🏷️ **Version-specific notifications**
                  if [[ "${{ github.ref }}" == refs/tags/* ]]; then
                      echo "🏷️ Production deployment notification for version: ${{ env.IMAGE_TAG_VERSION }}"
                  fi
              # Interview Story: "This alerts restaurant managers about the deployment status"
