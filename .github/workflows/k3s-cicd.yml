name: K3s CI/CD Pipeline (Lightweight & Fast)

on:
    # Disabled automatic triggers - use workflow_dispatch for manual testing
    # push:
    #     branches: [main]
    # pull_request:
    #     branches: [main]
    workflow_dispatch:

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: pavan-official/pavan-e-commerce-ui
    KUBERNETES_NAMESPACE: ecommerce-production

jobs:
    # PHASE 1: Quality Gates (Fast feedback)
    quality-checks:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Validate Docker build requirements
              run: |
                  echo "🔍 Validating Docker build requirements..."

                  # Check if required files exist
                  if [ ! -f "client/package.json" ]; then
                    echo "❌ ERROR: client/package.json not found"
                    exit 1
                  fi

                  if [ ! -f "client/pnpm-lock.yaml" ]; then
                    echo "❌ ERROR: client/pnpm-lock.yaml not found"
                    exit 1
                  fi

                  if [ ! -f "client/start.sh" ]; then
                    echo "❌ ERROR: client/start.sh not found"
                    exit 1
                  fi

                  if [ ! -f "client/Dockerfile" ]; then
                    echo "❌ ERROR: client/Dockerfile not found"
                    exit 1
                  fi

                  echo "✅ All Docker build requirements validated"

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 9

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "18"

            - name: Install dependencies
              run: |
                  cd client
                  pnpm install --frozen-lockfile

            - name: Run linting (non-blocking)
              run: |
                  cd client
                  pnpm run lint > /dev/null 2>&1 || echo "Linting completed with issues - continuing pipeline..."

            - name: Run TypeScript type check (non-blocking)
              run: |
                  cd client
                  pnpm exec tsc --noEmit --skipLibCheck || echo "Type check completed with issues - continuing pipeline..."

    # PHASE 2: Security Scan
    security-scan:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: "trivy-results.sarif"

    # PHASE 3: Build and Package
    build-and-package:
        needs: quality-checks
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=sha,prefix={{branch}}-

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./client
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # PHASE 4: Deploy to K3s (Ultra-Lightweight)
    deploy-to-k3s:
        needs: [build-and-package, security-scan]
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up kubectl
              uses: azure/setup-kubectl@v3
              with:
                  version: "v1.28.0"

            - name: Install K3s
              run: |
                  echo "🚀 Installing K3s (lightweight Kubernetes)..."
                  curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644

                  # Wait for K3s to be ready
                  sudo systemctl status k3s

                  # Set up kubectl
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  sudo chmod 644 /etc/rancher/k3s/k3s.yaml

                  echo "✅ K3s installed and ready"
                  kubectl get nodes

            - name: Load Docker image into K3s
              run: |
                  echo "🚀 Loading Docker image into K3s..."
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

                  # Import image to K3s
                  sudo k3s ctr images import ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

                  echo "✅ Image loaded successfully"

            - name: Deploy to K3s
              run: |
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

                  # Create namespace
                  kubectl create namespace ${{ env.KUBERNETES_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

                  # Deploy application using our optimized script
                  cd k8s-manifests/scripts
                  chmod +x deploy.sh
                  ./deploy.sh production k3s

            - name: Wait for deployment
              run: |
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  echo "⏳ Waiting for deployment to be ready..."
                  kubectl wait --for=condition=available --timeout=300s deployment/ecommerce-frontend-deployment -n ${{ env.KUBERNETES_NAMESPACE }}

                  echo "✅ Deployment ready!"
                  kubectl get pods -n ${{ env.KUBERNETES_NAMESPACE }}

            - name: Get application URLs
              run: |
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  echo "🚀 Application deployed successfully!"
                  echo "📊 Frontend: http://localhost:3000"
                  echo "🔍 Cluster Info:"
                  kubectl cluster-info

            - name: Run integration tests
              run: |
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  # Wait for services to be ready
                  sleep 10

                  # Test frontend
                  curl -f http://localhost:3000/api/health || exit 1
                  echo "✅ Integration tests passed"

    # PHASE 5: Performance Testing
    performance-test:
        needs: deploy-to-k3s
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up kubectl
              uses: azure/setup-kubectl@v3

            - name: Install K3s
              run: |
                  curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  sudo chmod 644 /etc/rancher/k3s/k3s.yaml

            - name: Run performance tests
              run: |
                  export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
                  echo "🚀 Running performance tests..."

                  # Install k6
                  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
                  echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
                  sudo apt-get update
                  sudo apt-get install k6

                  # Run basic performance test
                  echo "import http from 'k6/http';" > test.js
                  echo "export default function() {" >> test.js
                  echo "  http.get('http://localhost:3000/api/health');" >> test.js
                  echo "}" >> test.js

                  k6 run --vus 10 --duration 30s test.js

    # PHASE 6: Cleanup
    cleanup:
        if: always()
        runs-on: ubuntu-latest
        steps:
            - name: Cleanup K3s
              run: |
                  echo "🧹 Cleaning up K3s..."
                  sudo /usr/local/bin/k3s-uninstall.sh || echo "K3s already uninstalled"
