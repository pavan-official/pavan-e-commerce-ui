# ðŸš€ **Simplified E-commerce Frontend Deployment**
# Purpose: Demonstrate Kubernetes deployment with working application
# Why: Use basic Node.js image to avoid complex build issues
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-frontend
  namespace: ecommerce-production
  labels:
    app: ecommerce
    component: frontend
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecommerce
      component: frontend
  template:
    metadata:
      labels:
        app: ecommerce
        component: frontend
    spec:
      serviceAccountName: ecommerce-frontend
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for database..."
          until nc -z postgres-service 5432; do
            echo "Database not ready, waiting..."
            sleep 2
          done
          echo "Database is ready!"
          
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do
            echo "Redis not ready, waiting..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: ecommerce-app
        image: node:20-alpine
        ports:
        - containerPort: 3000
          name: http
        command: ['sh', '-c']
        args:
        - |
          echo "Starting E-commerce Application Demo..."
          echo "Database: postgres-service:5432"
          echo "Redis: redis-service:6379"
          echo "Application would connect to these services"
          
          # Create a simple HTTP server
          cat > /tmp/server.js << 'EOF'
          const http = require('http');
          const server = http.createServer((req, res) => {
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({
              message: 'E-commerce Application Running!',
              status: 'healthy',
              services: {
                database: 'postgres-service:5432',
                cache: 'redis-service:6379'
              },
              timestamp: new Date().toISOString()
            }));
          });
          server.listen(3000, '0.0.0.0', () => {
            console.log('E-commerce demo server running on port 3000');
          });
          EOF
          
          node /tmp/server.js
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          value: "postgresql://ecommerce:password@postgres-service:5432/ecommerce_db"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
---
# E-commerce Service
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-frontend-service
  namespace: ecommerce-production
  labels:
    app: ecommerce
    tier: frontend
spec:
  selector:
    app: ecommerce
    component: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: LoadBalancer
