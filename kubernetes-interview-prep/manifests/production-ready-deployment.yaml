# ðŸš€ **Production-Ready E-commerce Deployment**

## ðŸ“‹ **Deployment Manifest**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-frontend
  namespace: production
  labels:
    app: ecommerce
    component: frontend
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"name":"ecommerce-frontend"}}
spec:
  # High availability configuration
  replicas: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
      maxSurge: 3
  
  selector:
    matchLabels:
      app: ecommerce
      component: frontend
  
  template:
    metadata:
      labels:
        app: ecommerce
        component: frontend
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Service account
      serviceAccountName: ecommerce-frontend
      
      # Init containers for setup
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z postgres-service 5432; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Database is ready!"
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      
      # Main application container
      containers:
      - name: app
        image: ecommerce-client:v1.2.3
        imagePullPolicy: IfNotPresent
        
        # Port configuration
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          value: "info"
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: ecommerce-config
        - secretRef:
            name: ecommerce-secrets
        
        # Resource management
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # Health checks
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: "kube-probe/1.0"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            httpHeaders:
            - name: User-Agent
              value: "kube-probe/1.0"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.next/cache
        - name: logs
          mountPath: /app/logs
      
      # Sidecar container for logging
      - name: log-shipper
        image: fluentd:latest
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: logs
          mountPath: /var/log
        - name: fluentd-config
          mountPath: /fluentd/etc
        env:
        - name: FLUENTD_CONF
          value: "fluent.conf"
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: fluentd-config
        configMap:
          name: fluentd-config
      
      # Node selection
      nodeSelector:
        kubernetes.io/os: linux
        node-type: worker
      
      # Tolerations for node taints
      tolerations:
      - key: "node-role.kubernetes.io/worker"
        operator: "Exists"
        effect: "NoSchedule"
      
      # Affinity rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ecommerce
              topologyKey: kubernetes.io/hostname
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
```

## ðŸ“‹ **Service Manifest**
```yaml
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-frontend-service
  namespace: production
  labels:
    app: ecommerce
    component: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: ecommerce
    component: frontend
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
```

## ðŸ“‹ **Horizontal Pod Autoscaler**
```yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ecommerce-frontend-hpa
  namespace: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ecommerce-frontend
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max
```

## ðŸ“‹ **Pod Disruption Budget**
```yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ecommerce-frontend-pdb
  namespace: production
spec:
  minAvailable: 7
  selector:
    matchLabels:
      app: ecommerce
      component: frontend
```

## ðŸ“‹ **Network Policy**
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ecommerce-frontend-netpol
  namespace: production
spec:
  podSelector:
    matchLabels:
      app: ecommerce
      component: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: ecommerce
          component: frontend
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
```

## ðŸ“‹ **Service Account**
```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecommerce-frontend
  namespace: production
  labels:
    app: ecommerce
    component: frontend
```

## ðŸ“‹ **Role and RoleBinding**
```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ecommerce-frontend-role
  namespace: production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ecommerce-frontend-rolebinding
  namespace: production
subjects:
- kind: ServiceAccount
  name: ecommerce-frontend
  namespace: production
roleRef:
  kind: Role
  name: ecommerce-frontend-role
  apiGroup: rbac.authorization.k8s.io
```

## ðŸ“‹ **ConfigMap**
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecommerce-config
  namespace: production
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  DATABASE_URL: "postgresql://postgres-service:5432/ecommerce"
  REDIS_URL: "redis://redis-service:6379"
  FEATURE_FLAGS: "payment_v2,analytics_v3"
  CACHE_TTL: "3600"
  RATE_LIMIT: "1000"
```

## ðŸ“‹ **Secret**
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: ecommerce-secrets
  namespace: production
type: Opaque
data:
  DATABASE_PASSWORD: <base64-encoded-password>
  JWT_SECRET: <base64-encoded-secret>
  STRIPE_API_KEY: <base64-encoded-key>
  REDIS_PASSWORD: <base64-encoded-password>
```

## ðŸ“‹ **Fluentd ConfigMap**
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: production
data:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/app.log
      pos_file /var/log/app.log.pos
      tag app.log
      format json
    </source>
    
    <match app.log>
      @type forward
      <server>
        host fluentd-aggregator
        port 24224
      </server>
    </match>
```

## ðŸŽ¯ **Deployment Commands**

### **Deploy the Application**
```bash
# Create namespace
kubectl create namespace production

# Apply all manifests
kubectl apply -f production-ready-deployment.yaml

# Check deployment status
kubectl get pods -n production
kubectl get svc -n production
kubectl get hpa -n production

# Monitor rollout
kubectl rollout status deployment/ecommerce-frontend -n production

# Check logs
kubectl logs -f deployment/ecommerce-frontend -n production
```

### **Scaling Commands**
```bash
# Manual scaling
kubectl scale deployment ecommerce-frontend --replicas=20 -n production

# Check HPA status
kubectl get hpa ecommerce-frontend-hpa -n production

# View HPA events
kubectl describe hpa ecommerce-frontend-hpa -n production
```

### **Rolling Update**
```bash
# Update image
kubectl set image deployment/ecommerce-frontend app=ecommerce-client:v1.2.4 -n production

# Monitor rollout
kubectl rollout status deployment/ecommerce-frontend -n production

# Rollback if needed
kubectl rollout undo deployment/ecommerce-frontend -n production
```

## ðŸŽ¯ **Interview Questions**

### **Q: "What makes this deployment production-ready?"**
**A:** "This deployment includes:
1. **High Availability**: 10 replicas with anti-affinity rules
2. **Resource Management**: Proper requests and limits
3. **Health Checks**: Readiness, liveness, and startup probes
4. **Security**: Non-root user, read-only filesystem, network policies
5. **Monitoring**: Prometheus metrics and logging
6. **Auto-scaling**: HPA with multiple metrics
7. **Rolling Updates**: Zero-downtime deployments
8. **Pod Disruption Budget**: Maintains availability during updates"

### **Q: "How do you handle secrets in this deployment?"**
**A:** "I use Kubernetes Secrets with:
1. **Base64 encoding** for sensitive data
2. **RBAC** to control access
3. **Environment variable injection** via secretRef
4. **External secret management** integration ready
5. **Rotation policies** for production security"

### **Q: "What monitoring is built into this deployment?"**
**A:** "Comprehensive monitoring includes:
1. **Prometheus metrics** on port 9090
2. **Health check endpoints** for Kubernetes probes
3. **Fluentd sidecar** for log shipping
4. **HPA metrics** for auto-scaling
5. **Resource monitoring** via kubectl top
6. **Event monitoring** via kubectl get events"

---

**Next**: [Database StatefulSet](./statefulset-postgresql.yaml)
